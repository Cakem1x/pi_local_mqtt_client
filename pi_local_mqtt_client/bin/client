#!/usr/bin/env python3

import adafruit_bme680
import board
import paho.mqtt.client as mqtt
import time
import traceback

def get_cpu_temp(cpu_temp_filename="/sys/class/thermal/thermal_zone0/temp"):
        with open(cpu_temp_filename) as cpu_temp_file:
                cpu_temp_celsius = int(cpu_temp_file.read()) / 1000.0
                return cpu_temp_celsius

# config:
broker = "127.0.0.1"
port = 1883
client_id = "mqtt_on_pi"
topic_prefix = "h10/floor1/living_room"
status_topic = f"{topic_prefix}/{client_id}/status"
bme680_topic = f"{topic_prefix}/bme680"
pi_topic = f"{topic_prefix}/pi"

# BME680 sensor. To make it be on address 0x76: Connect its SDO pin to GND
bme680 = adafruit_bme680.Adafruit_BME680_I2C(board.I2C(), address=0x76)

# MQTT client
client=mqtt.Client(client_id)
client.will_set(status_topic, "offline", qos=2, retain=True)
client.connect(broker, port)
client.loop_start()
client.publish(status_topic, "online", qos=2, retain=True)
print(f"MQTT client setup complete, sent online notice on topic {status_topic}")

while True:
        try:
                client.publish(f"{bme680_topic}/temperature", "{:.2f}".format(bme680.temperature), qos=0, retain=False)
                client.publish(f"{bme680_topic}/pressure", "{:.2f}".format(bme680.pressure), qos=0, retain=False)
                client.publish(f"{bme680_topic}/relative_humidity", "{:.2f}".format(bme680.relative_humidity), qos=0, retain=False)
                client.publish(f"{bme680_topic}/gas_resistance", "{:.2f}".format(bme680.gas), qos=0, retain=False)
                client.publish(f"{pi_topic}/cpu_temperature", "{:.2f}".format(get_cpu_temp()), qos=0, retain=False)
                time.sleep(20);
        except Exception as e:
                print(traceback.format_exc())

client.disconnect()
client.loop_stop()
